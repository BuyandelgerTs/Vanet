//
// Generated file, do not edit! Created by opp_msgc 4.4 from EMSPkt.msg.
//

#ifndef _EMSPKT_M_H_
#define _EMSPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "MacPkt_m.h"
// }}



/**
 * Class generated from <tt>EMSPkt.msg</tt> by opp_msgc.
 * <pre>
 * packet EMSPkt extends MacPkt
 * {
 *     int address3;
 *     int address4;
 *     int fragmentation; 
 *     int informationDS; 
 *     int sequenceControl;
 *     bool retry;
 *     simtime_t duration; 	
 *     
 *     
 *     
 * }
 * </pre>
 */
class EMSPkt : public ::MacPkt
{
  protected:
    int address3_var;
    int address4_var;
    int fragmentation_var;
    int informationDS_var;
    int sequenceControl_var;
    bool retry_var;
    simtime_t duration_var;

  private:
    void copy(const EMSPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EMSPkt&);

  public:
    EMSPkt(const char *name=NULL, int kind=0);
    EMSPkt(const EMSPkt& other);
    virtual ~EMSPkt();
    EMSPkt& operator=(const EMSPkt& other);
    virtual EMSPkt *dup() const {return new EMSPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getAddress3() const;
    virtual void setAddress3(int address3);
    virtual int getAddress4() const;
    virtual void setAddress4(int address4);
    virtual int getFragmentation() const;
    virtual void setFragmentation(int fragmentation);
    virtual int getInformationDS() const;
    virtual void setInformationDS(int informationDS);
    virtual int getSequenceControl() const;
    virtual void setSequenceControl(int sequenceControl);
    virtual bool getRetry() const;
    virtual void setRetry(bool retry);
    virtual simtime_t getDuration() const;
    virtual void setDuration(simtime_t duration);
};

inline void doPacking(cCommBuffer *b, EMSPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EMSPkt& obj) {obj.parsimUnpack(b);}


#endif // _EMSPKT_M_H_
